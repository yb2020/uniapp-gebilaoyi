<template>
    <view>
		<view class="camera " @click="goDetailPage('/circleFriends/add')">
			<uni-icons type="camera" color="#ffffff" size="30" />
		</view>
		
		<view class="uni-margin-wrap">
			<swiper class="swiper" circular :indicator-dots="indicatorDots" :autoplay="autoplay" :interval="interval" :duration="duration">
				<swiper-item @click="ad(item)" v-for="(item,index) in swiperList" :key="index">
					<image :src="item.url" mode="aspectFill" v-if="item.type=='image'"></image>
				</swiper-item>
				
			</swiper>
		</view>
		
		<view class="uni-userinfo">
			<view class="userinfo-name">
				<text @click="toLogin" v-if="!userInfo.isLogin">
					{{userInfo.nickName || userInfo.email}}
				</text>
				<text v-else>
					{{userInfo.nickName || userInfo.email}}
				</text>
			</view>
			<view class="userinfo-avatar-wapper">
				<image class="userinfo-avatar" :src="userInfo.avatarUrl"></image>
			</view>
		</view>
		
		<list class="scroll-v list" enableBackToTop="true" scroll-y loadmoreoffset="15" @loadmore="loadMore()">
			<cell v-for="(imageText,index) in page.list" :key="index">
				<Item :row="imageText" :user="userInfo" :canvasId="canvasId" @changeCanvasHeight="changeCanvasHeight"></Item>
			</cell>
			<view class="uni-loadmore" v-if="page.isLoading">{{page.loadingText}}</view>
		</list>
		
		
		<!-- 用于一键保存并生成带有二维码的图片，不可删除 -->
		<view style="position:fixed;top:999999999999999999999rpx;">
			<canvas :style="{ width: '100vw', height: canvasHeight }" :canvas-id="canvasId" ></canvas>
		</view>
		
		<Login ref="login" @close="closeLogin" @done="doneLogin"></Login>
			
    </view>
</template>
<script>
	import Authorization from "@/common/Authorization"
	import laoyiApi from "@/api/laoyi"
	import ACLApi from '@/common/ACL'
	import Login from "@/pages/components/login"
	import Item from '@/pages/components/circleFriends/item'
	import { formatTime, parseTime } from '@/utils'
	
	import {
		mapState,
		mapMutations
	} from 'vuex'
	
    export default {
        components: {
			Login, Item
        },
        data() {
            return {
				swiperList: [{
					id: 0,
					type: 'image',
					url: 'https://mmbiz.qpic.cn/mmbiz_png/kaI5jJfvU3KOtibaayPeRevJTPmjhsYec8anxfWuMF0mKwUOKRaqfhv3JwjFic62kMMvFGe6ag7kvV3sRdZZVCEQ/0?wx_fmt=png'
				}, {
					id: 1,
					type: 'image',
					url: 'https://mmbiz.qpic.cn/mmbiz_png/kaI5jJfvU3KOtibaayPeRevJTPmjhsYechKltTibmOzpRNQ89oZTptWtqCl03VDGSVmMibib6HQYUxUxPrNNPeySRw/0?wx_fmt=png',
				}],
				userInfo: this.$store.state,
				page: {
					refreshing: false,
					list: [],
					currentPage: 1,
					pageSize: 4,
					pages: 0,
					total: 0,
					isLoading: false,
					loadingText: '上拉加载更多数据。。。'
				},
				canvasId: 'reportCanvas',
				canvasHeight: '100vh',
                navigateFlag: false,
				isHiddenTabBar: true,
				indicatorDots: true,
				autoplay: true,
				interval: 2000,
				duration: 500
            };
        },
		onReachBottom() {
			this.page.isLoading = true
			if(this.page.currentPage < this.page.pages) {
				this.page.currentPage += 1
				setTimeout(() => {
					this.getList()
				}, 300);
			}else {
				this.page.loadingText = '没有更多的数据了'
			}
		},
        onShareAppMessage() {
            return {
                title: this.userInfo.nickName + '邀请你免费体验一键转发工具',
                path: '/pages/tabBar/tool/tool'
            };
        },
        onNavigationBarButtonTap(e) {
            uni.navigateTo({
                url: '/pages/about/about'
            });
        },
        async onLoad(options) {
			if(options.scene) {
				let {paramters} = await ACLApi.qr.app.getByIdName(options.scene)
				let isPorxy =  ACLApi.qr.app.utils.get(paramters, "proxy")
				let proxyType =  ACLApi.qr.app.utils.get(paramters, "proxyType")
				
				if("true" !== isPorxy) {
					uni.switchTab({
						url: '/pages/tabBar/component/component'
					})
					return
				}
				switch(proxyType) {
					case 'ImageText' :
						let id = ACLApi.qr.app.utils.get(paramters, "id")
						console.log(id)
						uni.navigateTo({//跳转到图文详情页
							url: '/pages/tool/circleFriends/detail?id=' + id,
							success: (e) => {
								console.log(e)
							},
							fail: (e) => {
								console.log(e)
							}
						})
						break;
					default:
						uni.switchTab({
							url: '/pages/tabBar/component/component',
							success: (e) => {
								console.log(e)
							},
							fail: (e) => {
								console.log(e)
							}
						})
						break;
				}
			}
        },
        onShow() {
			//console.log(this.$store.state.tool.refresh)
            this.navigateFlag = false
            this.leaveSetTabBarPage()
			
			if(Authorization.checkLogin()) {
				if(this.$store.state.tool.refresh) {
					this.initList()
					this.getList()
					this.$store.dispatch('toggleRefreshTool')
					return 
				}
				if(this.page.currentPage === 1) {
					this.getList()
				}
			}else {
				this.initList()
			}
        },
        onHide() {
            this.leaveSetTabBarPage();
        },
        methods: {
			changeCanvasHeight(height) {
				this.canvasHeight = height + "px"
			},
			toLogin() {
				if(!Authorization.checkLogin()) {
					this.toggleHideTabBar()
					this.$refs["login"].open()
					return false
				}else {
					this.getList()
					return true
				}
				
			},
			closeLogin() {
				this.toggleHideTabBar()
			},
			changeIndicatorDots(e) {
				this.indicatorDots = !this.indicatorDots
			},
			changeAutoplay(e) {
				this.autoplay = !this.autoplay
			},
			intervalChange(e) {
				this.interval = e.target.value
			},
			durationChange(e) {
				this.duration = e.target.value
			},
            triggerCollapse(e) {
                if (!this.list[e].pages) {
                    this.goDetailPage(this.list[e].url);
                    return;
                }
                for (var i = 0; i < this.list.length; ++i) {
                    if (e === i) {
                        this.list[i].open = !this.list[e].open;
                    } else {
                        this.list[i].open = false;
                    }
                }
            },
            goDetailPage(path) {
                if (this.navigateFlag) {
                    return;
                }
                this.navigateFlag = true;
				
				path = path ? "/pages/tool" + path : path
                uni.navigateTo({
                    url: path
                });
            },
			ad(item) {
				uni.downloadFile({
					url: item.url,//图片地址
					success: (res) =>{
						if (res.statusCode === 200){
							uni.saveImageToPhotosAlbum({
								filePath: res.tempFilePath,
								success: function() {
									uni.showToast({
										title: "保存成功,请扫描二维码关注",
										icon: "none"
									});
								},
								fail: function() {
									uni.showToast({
										title: "保存失败",
										icon: "none"
									});
								}
							});
						} 
					}
				})
			},
            leaveSetTabBarPage() {
                setTimeout(() => {
                    this.navigateFlag = false;
                }, 200)
            },
			initList() {
				this.page.currentPage = 1
				this.page.pages = 0
				this.page.pageSize = 4
				this.page.list = []
				this.page.isLoading = false
				this.page.loadingText = '上拉加载更多数据。。。'
			},
			getList() {
				if(this.$store.state.isLogin) {
					laoyiApi.personal.imageText.getList({
						currentPage: this.page.currentPage,
						pageSize: this.page.pageSize
					}).then(result => {
						var tmpPage = result.data
						tmpPage.list.forEach(row => {
						  row.createDate = parseTime(row.createDate, '{y}-{m}-{d} {h}:{i}:{s}')
						  row.modifyDate = formatTime(row.modifyDate)
						})
						this.page.total = tmpPage.total
						this.page.currentPage = tmpPage.pageNum
						this.page.pageSize = tmpPage.pageSize
						this.page.pages = tmpPage.pages
						if(this.page.currentPage === 1) {
							this.page.list = JSON.parse(JSON.stringify(tmpPage.list)) // 断开引用
						}else {
							this.page.list = this.page.list.concat(JSON.parse(JSON.stringify(tmpPage.list))) // 断开引用
						}
						
						this.page.loadingText = '上拉加载更多数据。。。'
						this.page.isLoading = false
						uni.stopPullDownRefresh();
					})
				}
			},
			loadMore(e) {
			    setTimeout(() => {
					console.log("aaaa")
			       //this.getList();
			    }, 500)
			},
			doneLogin(bool) {
				if(bool) {
					this.getList()
				}
			},
			toggleHideTabBar() {
				if (this.isHiddenTabBar) {
					uni.hideTabBar()
				} else {
					uni.showTabBar()
				}
				this.isHiddenTabBar = !this.isHiddenTabBar
			},
			
        }
    };
</script>

<style lang="scss" scoped>
    @import '../../../common/uni-nvue.css';
	
	.uni-margin-wrap {
		width: 100%;
		margin:0 0;
	}
	.swiper {
		height: 450rpx;
	}
	.swiper-item {
		display: block;
		height: 450rpx;
		line-height: 450rpx;
		text-align: center;
	}
	
	.camera {
		position: fixed;
		width: 80rpx;
		height: 80rpx;
		top: 50rpx;
		left: 0;
		z-index: 99;
		display: flex;
		justify-content: center;
		align-items: center;
	}
	
	.swiper-list {
		margin-top: 40rpx;
		margin-bottom: 0;
	}
	
	.uni-common-mt{
		margin-top:60rpx;
		position:relative;
	}
	
	.info {
		position: absolute;
		right:20rpx;
	}
	
	.uni-padding-wrap {
	    width:550rpx;
	    padding:0 100rpx;
	}
	
	.uni-userinfo {
		position: absolute;
		
		top: 380upx;
		display: inline-block;
		right: 0;
	
		padding-right: 30upx;
		.userinfo-name {
			line-height: 128upx;
			font-size: 30upx;
			padding-right: 20upx;
			float: left ;
		}
		.userinfo-avatar-wapper{
			width: 128upx;
			height: 128upx;
			
			.userinfo-avatar {
				//border-radius: 128upx
				border-radius: 10upx;
				width: 100%;
				height: 100%;
				border: 4upx solid #FFFFFF ;
			}
		}
	}
	
	.update-tips-text {
	    font-size: 14px;
	    color: #ffffff;
	}
	
	.refresh {
	    width: 750upx;
	    height: 64px;
	    justify-content: center;
	}
	
	.refresh-view {
	    flex-direction: row;
	    flex-wrap: nowrap;
	    align-items: center;
	    justify-content: center;
	}
	
	.refresh-icon {
		width: 30px;
		height: 30px;
		transition-duration: .5s;
		transition-property: transform;
		transform: rotate(0deg);
		transform-origin: 15px 15px;
	}
	
	.refresh-icon-active {
		transform: rotate(180deg);
	}
	
	.loading-icon {
		width: 20px;
		height: 20px;
		margin-right: 5px;
		color: #999999;
	}
	
	.loading-text {
	    margin-left: 2px;
	    font-size: 16px;
	    color: #999999;
	}
	
	.loading-more {
	    align-items: center;
	    justify-content: center;
	    padding-top: 10px;
	    padding-bottom: 10px;
	    text-align: center;
	}
	
	.loading-more-text {
	    font-size: 28upx;
	    color: #999;
	}
	
</style>